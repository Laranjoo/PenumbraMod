<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReLogic</name>
    </assembly>
    <members>
        <member name="T:ReLogic.Content.AssetRepository">
             <summary>
             Async loading has been fully integrated into AssetRepository
             Assets which are asynchronously loaded will:
            	- be deserialized on the thread pool
            	- return to the main thread if the asset can only be created there (for assets requiring GraphicsDevice)
            	- become loaded at a defined time:
            		- at the end of a frame or
            		- when content sources are changing or
            		- when requested by ImmediateLoad on the main thread
            
             Assets which require main thread creation, but are requested via ImmediateLoad on a worker thread will:
            	- be deserialized immediately on the worker thread
            	- transition to asynchronous loading for creation
            
             </summary>
        </member>
        <member name="M:ReLogic.Content.IAssetRepository.Request``1(System.String,ReLogic.Content.AssetRequestMode)">
            <summary>
            <b><see cref="F:ReLogic.Content.AssetRequestMode.AsyncLoad"/> is recommended to avoid blocking the main or mod loading threads.</b>
            <para/>
            Assets loaded via <see cref="F:ReLogic.Content.AssetRequestMode.AsyncLoad"/> will only finish loading at the end of a frame, unless forced to finish immediately by a <see cref="F:ReLogic.Content.AssetRequestMode.ImmediateLoad"/> or <see cref="P:ReLogic.Content.Asset`1.Wait"/> call.
            <para/>
            Any assets requested asynchronously during mod loading will be transferred at the end of <see cref="M:Terraria.ModLoader.Mod.PostSetupContent"/> and will remain fully loaded for the duration of the game.
            <br/><see cref="P:ReLogic.Content.Asset`1.Wait"/> can be used to ensure an asynchronously loaded asset has finished loading before accessing <see cref="P:ReLogic.Content.Asset`1.Value"/>
            <para/>
            <seealso cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> assets have a default <see cref="P:ReLogic.Content.Asset`1.Value"/> containing a transparent 1x1 texture that can be used while the asset loads.
            <para/>
            Can be safely called on the server despite the server not loading assets, so there is no need to add checks for <c>Main.dedServ</c>. Assets loaded on the server will always be returned as if loaded via <see cref="F:ReLogic.Content.AssetRequestMode.DoNotLoad"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assetName"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ReLogic.Content.Sources.IContentSource.GetExtension(System.String)">
            <summary>
            Must be threadsafe! 
            </summary>
            <returns>null if the asset does not exist</returns>
        </member>
        <member name="M:ReLogic.Content.Sources.IContentSource.OpenStream(System.String)">
            <summary>
            Must be threadsafe! 
            </summary>
        </member>
        <member name="M:ReLogic.Content.Sources.IContentSource.HasAsset(System.String)">
            <summary>
            Checks Rejections and GetExtension to determine if an asset exists
            </summary>
            <param name="assetName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
